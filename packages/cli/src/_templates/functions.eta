import {
  addTypenameRecursive,
  applyAddTypenameRecursiveToFields,
  buildOperationDocumentNode,
  type MapGraphQLType,
  type MapVariablesType,
  type TypedDocumentNode,
  type Variables,
  type ApplyAddTypenameRecursiveToFields,
  type AddTypenameRecursive,
} from "@graqq/core";

type Subset<T, U> = {
  [K in keyof T]: K extends keyof U ? T[K] : never;
};

export const $q = <VR extends Variables<GraphQLInputObjectTypes> = {}>(
  operationName: string,
  variables?: VR,
) => {
  const context = {
    typeMap: TypeMap,
    variables,
    addTypename: true,
  };

  type QueryType = QueryObjectTypes<Extract<keyof VR, string>>["Query"];
  type QueryWithVariableContext = <Q extends QueryType>(
    query: Subset<Q, QueryType>,
  ) => TypedDocumentNode<
    MapGraphQLType<GraphQLObjectTypes, GraphQLObjectTypes["Query"], ApplyAddTypenameRecursiveToFields<Q>>,
    MapVariablesType<GraphQLInputObjectTypes, VR>
  >;

  return buildOperationDocumentNode(
    operationName,
    "query",
    context,
    applyAddTypenameRecursiveToFields as any,
  ) as QueryWithVariableContext;
};

export const $m = <VR extends Variables<GraphQLInputObjectTypes> = {}>(
  operationName: string,
  variables?: VR,
) => {
  const context = {
    typeMap: TypeMap,
    variables,
    addTypename: true,
  };

  type MutationType = QueryObjectTypes<Extract<keyof VR, string>>["Mutation"];
  type MutationWithVariableContext = <Q extends MutationType>(
    mutation: Subset<Q, MutationType>,
  ) => TypedDocumentNode<
    MapGraphQLType<GraphQLObjectTypes, GraphQLObjectTypes["Mutation"], ApplyAddTypenameRecursiveToFields<Q>>,
    MapVariablesType<GraphQLInputObjectTypes, VR>
  >;

  return buildOperationDocumentNode(
    operationName,
    "mutation",
    context,
    applyAddTypenameRecursiveToFields as any,
  ) as MutationWithVariableContext;
};

export type InferFields<Q extends { $type: keyof QueryObjectTypes }> =
  MapGraphQLType<GraphQLObjectTypes, GraphQLObjectTypes[Q["$type"]], Q>;

export const $fieldsOf = <K extends keyof QueryObjectTypes>(objectType: K) => {
  type FieldType = QueryObjectTypes<any>[K];
  return <Q extends FieldType>(fields: Subset<Q, FieldType>) => ({
    ...addTypenameRecursive(fields),
    $type: objectType,
  });
};
